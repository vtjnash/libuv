name: CI

on: [push, pull_request]

jobs:
  build-cross-qemu:
    runs-on: ubuntu-latest
    name: build-cross-qemu-${{ matrix.config.arch }}

    strategy:
      fail-fast: false
      matrix:
        config:
          - {arch: armhf,   triple: arm-linux-gnueabihf,   qemu: arm     }
            # - {arch: arm64,   triple: aarch64-linux-gnu,      qemu: aarch64 }
            #          - {arch: riscv64, triple: riscv64-linux-gnu,      qemu: riscv64 }
            #          - {arch: powerpc, triple: powerpc-linux-gnu,      qemu: ppc     }
            #          - {arch: ppc64,   triple: powerpc64-linux-gnu,    qemu: ppc64   }
          - {arch: ppc64el, triple: powerpc64le-linux-gnu,  qemu: ppc64le }
            #          - {arch: s390x,   triple: s390x-linux-gnu,        qemu: s390x   }

    steps:
      - uses: actions/checkout@v2
      - name: Install QEMU
        # this ensure install latest qemu on ubuntu, apt get version is old
        env:
          QEMU_SRC: "http://archive.ubuntu.com/ubuntu/pool/universe/q/qemu"
          QEMU_VER: "qemu-user-static_5\\.0-.*_amd64\\.deb$"
        run: |
          DEB=`curl -s $QEMU_SRC/ | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2 | grep $QEMU_VER | tail -1`
          wget $QEMU_SRC/$DEB
          sudo dpkg -i $DEB
      - name: Download Libc support libraries
        env:
          LIBC_SRC: "http://ports.ubuntu.com/pool/main/g/glibc"
          LIBC_VER: "libc6_.*ubuntu10_${{ matrix.config.arch }}\\.deb$"
        run: |
          DEB=`curl -s $LIBC_SRC/ | grep -o -E 'href="([^"#]+)"' | cut -d'"' -f2 | grep $LIBC_VER | tail -1`
          wget $LIBC_SRC/$DEB
          dpkg -X $DEB cross_libc
          if [ -e cross_libc/lib64 ]; then ln -sfv ../lib/${{ matrix.config.triple }}/ld64.so.2 cross_libc/lib64/ld64.so.2; fi
          sudo mkdir -pv /etc/qemu-binfmt
          sudo mv -v cross_libc /etc/qemu-binfmt/${{ matrix.config.qemu }}
          qemu-${{ matrix.config.qemu }}-static --help
      - name: Install ${{ matrix.config.toolchain }}
        run: |
          sudo apt install gcc-${{ matrix.config.triple }} ninja-build -y
      - name: Build
        run: |
          mkdir build
          cd build && cmake .. -G Ninja -DBUILD_TESTING=ON -DQEMU=ON -DCMAKE_C_COMPILER=${{ matrix.config.triple }}-gcc
          cmake --build .
          ls -lh
      - name: Test Static
        run: |
          ./build/uv_run_tests_a
      - name: Test Shared
        run: |
          ./build/uv_run_tests
